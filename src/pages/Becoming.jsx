import { useState } from 'react'
import { Sparkles, Brain, Heart, Target } from 'lucide-react'

const Becoming = () => {
    const [manifestation, setManifestation] = useState(null)
    const [isLoading, setIsLoading] = useState(false)

    const generateManifestation = async () => {
        setIsLoading(true)
        // Here you would typically make an API call to generate the manifestation
        // For now, we'll use a template-based response
        setTimeout(() => {
            const response = {
                dreamLife: {
                    title: "M·ªôt ng√†y trong cu·ªôc s·ªëng m∆° ∆∞·ªõc c·ªßa b·∫°n",
                    description: "H√£y t∆∞·ªüng t∆∞·ª£ng m·ªôt ng√†y ho√†n h·∫£o trong t∆∞∆°ng lai c·ªßa b·∫°n, n∆°i m·ªçi th·ª© ƒë·ªÅu di·ªÖn ra nh∆∞ mong mu·ªën. B·∫°n th·ª©c d·∫≠y trong m·ªôt cƒÉn nh√† ƒë·∫πp, ƒë∆∞·ª£c bao quanh b·ªüi nh·ªØng ng∆∞·ªùi th√¢n y√™u. C√¥ng vi·ªác c·ªßa b·∫°n ƒëang ph√°t tri·ªÉn t·ªët ƒë·∫πp, v√† b·∫°n c√≥ ƒë·ªß th·ªùi gian ƒë·ªÉ theo ƒëu·ªïi nh·ªØng s·ªü th√≠ch c√° nh√¢n. B·∫°n c·∫£m th·∫•y h√†i l√≤ng, h·∫°nh ph√∫c v√† bi·∫øt ∆°n v√¨ t·∫•t c·∫£ nh·ªØng g√¨ m√¨nh ƒë√£ ƒë·∫°t ƒë∆∞·ª£c."
                },
                steps: [
                    {
                        title: "T∆∞ duy (Thought)",
                        description: "M·ªçi th·ª© b·∫Øt ƒë·∫ßu t·ª´ vi·ªác bi·∫øt r√µ m√¨nh th·ª±c s·ª± mu·ªën g√¨. H√£y d√†nh th·ªùi gian h√¨nh dung v·ªÅ cu·ªôc s·ªëng m∆° ∆∞·ªõc c·ªßa b·∫°n ‚Äì kh√¥ng ch·ªâ l√† nh·ªØng th·ª© b·∫°n mu·ªën c√≥, m√† c√≤n c·∫£ c·∫£m gi√°c, tr·∫£i nghi·ªám b·∫°n mu·ªën t·∫≠n h∆∞·ªüng m·ªói ng√†y.",
                        actions: [
                            "‚úçÔ∏è Vi·∫øt nh·∫≠t k√Ω",
                            "üé® T·∫°o b·∫£ng t·∫ßm nh√¨n (Vision Board)",
                            "üßò‚Äç‚ôÇÔ∏è Th·ª±c h√†nh thi·ªÅn ƒë·ªãnh v√† t∆∞·ªüng t∆∞·ª£ng",
                            "üìö ƒê·ªçc s√°ch v·ªÅ ph√°t tri·ªÉn c√° nh√¢n"
                        ]
                    },
                    {
                        title: "Ni·ªÅm tin (Belief)",
                        description: "Tin r·∫±ng m√¨nh l√†m ƒë∆∞·ª£c l√† b∆∞·ªõc ƒë·∫ßu ti√™n ƒë·ªÉ th·ª±c s·ª± l√†m ƒë∆∞·ª£c. ƒê·ª´ng ƒë·ªÉ nh·ªØng suy nghƒ© ti√™u c·ª±c k√©o b·∫°n xu·ªëng. N·∫øu c√≥ nh·ªØng ho√†i nghi, h√£y thay th·∫ø ch√∫ng b·∫±ng ni·ªÅm tin t√≠ch c·ª±c.",
                        actions: [
                            "üí™ Th·ª±c h√†nh kh·∫≥ng ƒë·ªãnh t√≠ch c·ª±c",
                            "üîç T√¨m ki·∫øm nh·ªØng c√¢u chuy·ªán th√†nh c√¥ng",
                            "üë• X√¢y d·ª±ng m√¥i tr∆∞·ªùng t√≠ch c·ª±c",
                            "üëØ Tham gia c√°c c·ªông ƒë·ªìng h·ªó tr·ª£"
                        ]
                    },
                    {
                        title: "H√†nh ƒë·ªông (Action)",
                        description: "∆Ø·ªõc m∆° ch·ªâ tr·ªü th√†nh hi·ªán th·ª±c khi b·∫°n b·∫Øt tay v√†o l√†m. ƒê·ª´ng ƒë·ª£i ƒë·∫øn l√∫c s·∫µn s√†ng, v√¨ th·∫≠t ra ch·∫≥ng ai ho√†n to√†n s·∫µn s√†ng c·∫£.",
                        actions: [
                            "üóìÔ∏è L·∫≠p k·∫ø ho·∫°ch nh·ªè, d·ªÖ l√†m",
                            "üåø T·∫°o th√≥i quen t·ªët",
                            "üéì Kh√¥ng ng·ª´ng h·ªçc h·ªèi",
                            "üí™ Ki√™n tr√¨, ƒë·ª´ng b·ªè cu·ªôc"
                        ]
                    }
                ]
            }
            setManifestation(response)
            setIsLoading(false)
        }, 1500)
    }

    return (
        <div className="max-w-4xl mx-auto p-6">
            <div className="text-center mb-12">
                <div className="flex justify-center mb-4">
                    <Sparkles className="h-12 w-12 text-primary" />
                </div>
                <h1 className="text-3xl font-bold text-gray-900 mb-4">Becoming - Hi·ªán Th·ª±c H√≥a ∆Ø·ªõc M∆°</h1>
                <p className="text-lg text-gray-600">
                    Kh√°m ph√° ti·ªÅm nƒÉng v√¥ h·∫°n c·ªßa b·∫°n v√† h·ªçc c√°ch bi·∫øn ∆∞·ªõc m∆° th√†nh hi·ªán th·ª±c
                </p>
            </div>

            {/* AI Prompt Section */}
            <div className="bg-white rounded-lg shadow p-6 mb-8">
                <div className="flex items-center mb-4">
                    <Brain className="h-6 w-6 text-primary mr-2" />
                    <h2 className="text-xl font-semibold text-gray-900">AI Manifestation Prompt</h2>
                </div>
                <p className="text-gray-600 mb-6">
                    H√£y ƒë·ªÉ AI gi√∫p b·∫°n h√¨nh dung r√µ r√†ng v·ªÅ cu·ªôc s·ªëng m∆° ∆∞·ªõc v√† c√°c b∆∞·ªõc ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c n√≥.
                </p>
                <button
                    onClick={generateManifestation}
                    disabled={isLoading}
                    className="w-full inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    {isLoading ? 'ƒêang t·∫°o...' : 'T·∫°o Manifestation Prompt'}
                </button>
            </div>

            {/* Generated Manifestation */}
            {manifestation && (
                <div className="space-y-8">
                    {/* Dream Life Section */}
                    <div className="bg-white rounded-lg shadow p-6">
                        <div className="flex items-center mb-4">
                            <Heart className="h-6 w-6 text-primary mr-2" />
                            <h2 className="text-xl font-semibold text-gray-900">{manifestation.dreamLife.title}</h2>
                        </div>
                        <p className="text-gray-600">{manifestation.dreamLife.description}</p>
                    </div>

                    {/* Steps Section */}
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {manifestation.steps.map((step, index) => (
                            <div key={index} className="bg-white rounded-lg shadow p-6">
                                <div className="flex items-center mb-4">
                                    <Target className="h-6 w-6 text-primary mr-2" />
                                    <h3 className="text-lg font-semibold text-gray-900">{step.title}</h3>
                                </div>
                                <p className="text-gray-600 mb-4">{step.description}</p>
                                <ul className="space-y-2">
                                    {step.actions.map((action, actionIndex) => (
                                        <li key={actionIndex} className="flex items-start">

                                            <span className="text-gray-600">{action}</span>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    )
}

export default Becoming 