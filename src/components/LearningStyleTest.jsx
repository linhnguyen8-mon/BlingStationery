import { useState, useEffect, useRef } from 'react'
import { Brain, Circle, Home } from 'lucide-react'
import { PieChart, Pie, Cell, ResponsiveContainer } from 'recharts'
import { useNavigate } from 'react-router-dom'

const questions = [
    {
        id: 1,
        text: "T√¥i th√≠ch h·ªçc th√¥ng qua c√°c c√¥ng c·ª• tr·ª±c quan nh∆∞ bi·ªÉu ƒë·ªì, ƒë·ªì th·ªã v√† s∆° ƒë·ªì.",
        category: "visual"
    },
    {
        id: 2,
        text: "T√¥i th√≠ch gi·∫£i ƒë·ªë v√† c√°c v·∫•n ƒë·ªÅ logic.",
        category: "logical"
    },
    {
        id: 3,
        text: "T√¥i h·ªçc t·ªët nh·∫•t b·∫±ng c√°ch ƒë·ªçc v√† ghi ch√©p.",
        category: "verbal"
    },
    {
        id: 4,
        text: "T√¥i nh·ªõ th√¥ng tin t·ªët h∆°n khi nghe ƒë∆∞·ª£c ph√°t √¢m.",
        category: "aural"
    },
    {
        id: 5,
        text: "T√¥i th√≠ch c√°c ho·∫°t ƒë·ªông th·ª±c h√†nh v√† tr·∫£i nghi·ªám th·ª±c t·∫ø.",
        category: "physical"
    },
    {
        id: 6,
        text: "T√¥i h·ªçc hi·ªáu qu·∫£ trong c√°c cu·ªôc th·∫£o lu·∫≠n nh√≥m v√† m√¥i tr∆∞·ªùng h·ª£p t√°c.",
        category: "social"
    },
    {
        id: 7,
        text: "T√¥i s·ª≠ d·ª•ng s∆° ƒë·ªì t∆∞ duy v√† c√°c c√¥ng c·ª• t·ªï ch·ª©c tr·ª±c quan ƒë·ªÉ hi·ªÉu kh√°i ni·ªám.",
        category: "visual"
    },
    {
        id: 8,
        text: "T√¥i th√≠ch ph√¢n t√≠ch c√°c m·∫´u v√† m·ªëi quan h·ªá gi·ªØa c√°c √Ω t∆∞·ªüng.",
        category: "logical"
    },
    {
        id: 9,
        text: "T√¥i h·ªçc t·ªët t·ª´ vi·ªác ƒë·ªçc s√°ch gi√°o khoa v√† t√†i li·ªáu vi·∫øt.",
        category: "verbal"
    },
    {
        id: 10,
        text: "T√¥i th√≠ch nghe ghi √¢m v√† gi·∫£i th√≠ch b·∫±ng l·ªùi n√≥i.",
        category: "aural"
    },
    {
        id: 11,
        text: "T√¥i h·ªçc b·∫±ng c√°ch th·ª±c h√†nh v√† luy·ªán t·∫≠p c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t.",
        category: "physical"
    },
    {
        id: 12,
        text: "T√¥i th√≠ch d·∫°y ng∆∞·ªùi kh√°c v√† gi·∫£i th√≠ch kh√°i ni·ªám cho b·∫°n b√®.",
        category: "social"
    }
]

const ratingLabels = [
    { value: 1, label: 'Hi·∫øm khi' },
    { value: 2, label: 'Th·ªânh tho·∫£ng' },
    { value: 3, label: 'Th∆∞·ªùng xuy√™n' },
    { value: 4, label: 'Lu√¥n lu√¥n' }
]

const learningStyles = {
    visual: {
        name: 'Ng∆∞·ªùi h·ªçc tr·ª±c quan üé®',
        description: 'B·∫°n ti·∫øp thu t·ªët qua h√¨nh ·∫£nh, s∆° ƒë·ªì v√† m√†u s·∫Øc.',
        tips: [
            'üß† S∆° ƒë·ªì t∆∞ duy ƒë·ªÉ ghi nh·ªõ',
            'üé¨ Xem video minh h·ªça',
            'üñçÔ∏è Ghi ch√∫ b·∫±ng m√†u s·∫Øc',
            'üÉè D√πng th·∫ª nh·ªõ c√≥ h√¨nh ·∫£nh',
            'üìä V·∫Ω s∆° ƒë·ªì, bi·ªÉu ƒë·ªì'
        ]
    },
    logical: {
        name: 'Ng∆∞·ªùi h·ªçc logic üß©',
        description: 'B·∫°n gi·ªèi ph√¢n t√≠ch, nh·∫≠n bi·∫øt quy lu·∫≠t v√† t·ªï ch·ª©c th√¥ng tin.',
        tips: [
            'üìö S·∫Øp x·∫øp ki·∫øn th·ª©c theo h·ªá th·ªëng',
            'üìù Gi·∫£i b√†i t·∫≠p logic',
            'üî¢ Chia nh·ªè th√¥ng tin theo quy tr√¨nh',
            'üìä Ph√¢n t√≠ch b·∫±ng bi·ªÉu ƒë·ªì',
            'üßÆ ·ª®ng d·ª•ng c√¥ng th·ª©c to√°n h·ªçc'
        ]
    },
    verbal: {
        name: 'Ng∆∞·ªùi h·ªçc ng√¥n ng·ªØ üìù',
        description: 'B·∫°n h·ªçc t·ªët qua ƒë·ªçc, vi·∫øt v√† ng√¥n t·ª´.',
        tips: [
            'üìñ ƒê·ªçc s√°ch, t√†i li·ªáu',
            '‚úçÔ∏è Vi·∫øt ghi ch√∫ ng·∫Øn g·ªçn',
            'üîë T√≥m t·∫Øt b·∫±ng t·ª´ kh√≥a',
            'üó£Ô∏è Th·∫£o lu·∫≠n ƒë·ªÉ hi·ªÉu s√¢u',
            'üìú Vi·∫øt blog ho·∫∑c nh·∫≠t k√Ω'
        ]
    },
    aural: {
        name: 'Ng∆∞·ªùi h·ªçc th√≠nh gi√°c üéß',
        description: 'B·∫°n ti·∫øp thu t·ªët qua √¢m thanh, gi·ªçng n√≥i v√† nh·ªãp ƒëi·ªáu.',
        tips: [
            'üéôÔ∏è Nghe podcast, b√†i gi·∫£ng',
            'üéµ D√πng nh·∫°c ƒë·ªÉ ghi nh·ªõ',
            'üîä Ghi √¢m v√† nghe l·∫°i',
            'üó£Ô∏è H·ªçc qua tranh lu·∫≠n nh√≥m',
            'üé∂ H·ªçc v·ªõi n·ªÅn nh·∫°c nh·∫π'
        ]
    },
    physical: {
        name: 'Ng∆∞·ªùi h·ªçc v·∫≠n ƒë·ªông üèÉ',
        description: 'B·∫°n h·ªçc hi·ªáu qu·∫£ qua th·ª±c h√†nh v√† ho·∫°t ƒë·ªông th·ªÉ ch·∫•t.',
        tips: [
            '‚úã H·ªçc b·∫±ng c√°ch th·ª±c h√†nh',
            'üö∂ Di chuy·ªÉn khi h·ªçc',
            'üß© D√πng m√¥ h√¨nh, v·∫≠t d·ª•ng',
            'üé≠ Luy·ªán t·∫≠p ƒë√≥ng vai',
            'üñäÔ∏è Vi·∫øt ra gi·∫•y ho·∫∑c b·∫£ng'
        ]
    },
    social: {
        name: 'Ng∆∞·ªùi h·ªçc x√£ h·ªôi ü§ù',
        description: 'B·∫°n h·ªçc t·ªët nh·∫•t khi t∆∞∆°ng t√°c v√† l√†m vi·ªác nh√≥m.',
        tips: [
            'üë• Tham gia nh√≥m h·ªçc t·∫≠p',
            'üó£Ô∏è Tranh lu·∫≠n ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c',
            'üéì D·∫°y l·∫°i cho ng∆∞·ªùi kh√°c',
            'üì¢ Nh·∫≠n ph·∫£n h·ªìi t·ª´ b·∫°n b√®',
            'üí¨ Tham gia di·ªÖn ƒë√†n h·ªçc t·∫≠p'
        ]
    }
};

const LearningStyleTest = () => {
    const [answers, setAnswers] = useState({})
    const [showResults, setShowResults] = useState(false)
    const [showToast, setShowToast] = useState(false)
    const [unansweredQuestions, setUnansweredQuestions] = useState([])
    const [currentQuestionId, setCurrentQuestionId] = useState(1)
    const [isScrolled, setIsScrolled] = useState(false)
    const questionRefs = useRef({})
    const navigate = useNavigate()

    useEffect(() => {
        // Add scroll event listener to update current question and progress bar style
        const handleScroll = () => {
            const questionElements = Object.values(questionRefs.current)
            const scrollPosition = window.scrollY + 100 // Offset for better detection

            // Update current question
            for (let i = 0; i < questionElements.length; i++) {
                const element = questionElements[i]
                if (element) {
                    const rect = element.getBoundingClientRect()
                    if (rect.top <= 100 && rect.bottom >= 100) {
                        setCurrentQuestionId(i + 1)
                        break
                    }
                }
            }

            // Update progress bar style based on scroll
            setIsScrolled(window.scrollY > 0)
        }

        window.addEventListener('scroll', handleScroll)
        return () => window.removeEventListener('scroll', handleScroll)
    }, [])

    const handleAnswer = (questionId, value) => {
        setAnswers(prev => ({
            ...prev,
            [questionId]: value
        }))
        setUnansweredQuestions(prev => prev.filter(id => id !== questionId))
    }

    const handleShowResults = () => {
        const unanswered = questions.filter(q => !answers[q.id]).map(q => q.id)
        if (unanswered.length > 0) {
            setUnansweredQuestions(unanswered)
            setShowToast(true)
            // Scroll to first unanswered question
            const firstUnanswered = unanswered[0]
            questionRefs.current[firstUnanswered]?.scrollIntoView({ behavior: 'smooth', block: 'center' })
            setTimeout(() => setShowToast(false), 3000)
            return
        }
        setShowResults(true)
    }

    const calculateResults = () => {
        const scores = {
            visual: 0,
            logical: 0,
            verbal: 0,
            aural: 0,
            physical: 0,
            social: 0
        }

        // Calculate total possible score for each category
        const categoryCounts = {
            visual: 0,
            logical: 0,
            verbal: 0,
            aural: 0,
            physical: 0,
            social: 0
        }

        // Count questions per category
        questions.forEach(q => {
            categoryCounts[q.category]++
        })

        // Calculate scores
        Object.entries(answers).forEach(([questionId, value]) => {
            const question = questions.find(q => q.id === parseInt(questionId))
            if (question) {
                scores[question.category] += value
            }
        })

        // Convert scores to percentages
        const percentages = Object.entries(scores).map(([style, score]) => ({
            style,
            percentage: Math.round((score / (categoryCounts[style] * 4)) * 100) // 4 is max score per question
        }))

        // Sort by percentage to find primary and secondary styles
        percentages.sort((a, b) => b.percentage - a.percentage)
        return {
            scores: percentages,
            primary: percentages[0],
            secondary: percentages[1]
        }
    }

    const progress = (Object.keys(answers).length / questions.length) * 100

    const COLORS = ['#E63946', '#F4A261', '#C8C107', '#2A9D8F', '#3B82F6', '#8B5CF6'];

    return (
        <div className="max-w-4xl mx-auto p-6">
            {!showResults && (
                <div className={`sticky rounded-xl top-0 z-10 py-4 my-4 transition-all duration-300 ${isScrolled ? 'bg-primary text-white' : 'bg-white text-gray-900'
                    }`}>
                    <div className="max-w-4xl mx-auto px-6">
                        <div className="flex items-center justify-between mb-2">
                            <h2 className={`text-lg font-medium ${isScrolled ? 'text-white' : 'text-gray-900'}`}>
                                Ti·∫øn ƒë·ªô
                            </h2>
                            <span className={`text-sm ${isScrolled ? 'text-white/80' : 'text-gray-500'}`}>
                                {Object.keys(answers).length} tr√™n {questions.length} c√¢u h·ªèi ƒë√£ tr·∫£ l·ªùi
                            </span>
                        </div>
                        <div className="w-full bg-white/20 rounded-full h-2.5">
                            <div
                                className={`h-2.5 rounded-full transition-all duration-300 ${isScrolled ? 'bg-white' : 'bg-primary'
                                    }`}
                                style={{ width: `${progress}%` }}
                            ></div>
                        </div>
                    </div>
                </div>
            )}

            {!showResults ? (
                <div className="space-y-4">
                    {questions.map((question) => (
                        <div
                            key={question.id}
                            ref={el => questionRefs.current[question.id] = el}
                            className={`bg-white p-6 rounded-lg shadow transition-all duration-300 ${unansweredQuestions.includes(question.id) ? 'border-2 border-red-500' : ''
                                } ${currentQuestionId === question.id ? 'ring-2 ring-primary' : ''
                                }`}
                        >
                            <div className="flex flex-col items-start justify-between ">
                                <p className="text-lg font-medium text-gray-900 ">{question.text}</p>

                            </div>
                            <div className="flex flex-col items-center">
                                <div className="flex justify-between w-full max-w-md mb-2">
                                    {ratingLabels.map((rating, index) => (
                                        <button
                                            key={rating.value}
                                            onClick={() => handleAnswer(question.id, rating.value)}
                                            className="flex flex-col justify-center items-center group transform transition-all duration-300 hover:scale-110"
                                        >
                                            <Circle
                                                className={`transition-all duration-300 ${answers[question.id] === rating.value
                                                    ? 'text-primary fill-primary'
                                                    : 'text-gray-300 group-hover:text-primary'
                                                    }`}
                                                size={24 + (index * 6)} // Increasing size for each option
                                            />
                                            <span className="text-xs text-gray-500 mt-1">{rating.label}</span>
                                        </button>
                                    ))}
                                </div>

                            </div>
                            {unansweredQuestions.includes(question.id) && (
                                <span className="flex items-start text-red-500 text-sm ">Vui l√≤ng tr·∫£ l·ªùi c√¢u h·ªèi n√†y</span>
                            )}
                        </div>
                    ))}

                    <div className="flex justify-center mt-8">
                        <button
                            onClick={handleShowResults}
                            className="px-6 py-3 rounded-md text-white font-medium transition-all duration-300 bg-primary hover:bg-primary/90 hover:scale-105"
                        >
                            Xem K·∫øt Qu·∫£
                        </button>
                    </div>
                </div>
            ) : (
                <div className="bg-white p-8 rounded-lg shadow">
                    <div className="text-center mb-8">
                        <Brain className="mx-auto h-12 w-12 text-primary mb-4" />
                        <h2 className="text-2xl font-bold text-gray-900 mb-2">K·∫øt Qu·∫£ Phong C√°ch H·ªçc T·∫≠p</h2>
                        <p className="text-gray-600">
                            D·ª±a tr√™n c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n, ƒë√¢y l√† c√°ch b·∫°n h·ªçc t·ªët nh·∫•t
                        </p>
                    </div>

                    {(() => {
                        const results = calculateResults()
                        const chartData = results.scores.map(score => ({
                            name: learningStyles[score.style].name,
                            value: score.percentage
                        }))

                        return (
                            <>
                                <div className="mb-8">
                                    <h3 className="text-xl font-semibold text-gray-900 mb-4">Bi·ªÉu ƒë·ªì ph√¢n b·ªë</h3>
                                    <div className="w-full h-64">
                                        <ResponsiveContainer width="100%" height="100%">
                                            <PieChart>
                                                <Pie
                                                    data={chartData}
                                                    cx="50%"
                                                    cy="50%"
                                                    labelLine={false}
                                                    outerRadius={80}
                                                    fill="#8884d8"
                                                    dataKey="value"
                                                    className='font-semibold'
                                                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                                                >
                                                    {chartData.map((entry, index) => (
                                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                                    ))}
                                                </Pie>
                                            </PieChart>
                                        </ResponsiveContainer>
                                    </div>
                                </div>

                                <div className="mb-8">
                                    <h3 className="text-xl font-semibold text-gray-900 mb-4">Phong C√°ch Ch√≠nh</h3>
                                    <div className="bg-gray-50 p-6 rounded-lg">
                                        <h4 className="text-lg font-medium text-primary mb-2">
                                            {learningStyles[results.primary.style].name}
                                        </h4>
                                        <p className="text-gray-600">
                                            {learningStyles[results.primary.style].description}
                                        </p>
                                    </div>
                                </div>

                                <div className="mb-8">
                                    <h3 className="text-xl font-semibold text-gray-900 mb-4">Phong C√°ch Ph·ª•</h3>
                                    <div className="bg-gray-50 p-6 rounded-lg">
                                        <h4 className="text-lg font-medium text-primary mb-2">
                                            {learningStyles[results.secondary.style].name}
                                        </h4>
                                        <p className="text-gray-600 ">
                                            {learningStyles[results.secondary.style].description}
                                        </p>
                                    </div>
                                </div>

                                <div>
                                    <h3 className="text-xl font-semibold text-gray-900 mb-4">L·ªùi Khuy√™n</h3>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        {learningStyles[results.primary.style].tips.map((tip, index) => (
                                            <div key={index} className="bg-gray-50 p-4 rounded-lg">
                                                <p className="text-gray-700">{tip}</p>
                                            </div>
                                        ))}
                                        {learningStyles[results.secondary.style].tips.map((tip, index) => (
                                            <div key={index} className="bg-gray-50 p-4 rounded-lg">
                                                <p className="text-gray-700">{tip}</p>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                <div className="mt-8 flex justify-center space-x-4">
                                    <button
                                        onClick={() => {
                                            setAnswers({})
                                            setShowResults(false)
                                        }}
                                        className="px-6 py-3 bg-primary text-white rounded-md hover:bg-primary/90 transition-all duration-300 hover:scale-105"
                                    >
                                        L√†m B√†i Ki·ªÉm Tra L·∫°i
                                    </button>
                                    <button
                                        onClick={() => navigate('/')}
                                        className="px-6 py-3 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-all duration-300 hover:scale-105 flex items-center"
                                    >
                                        <Home className="w-5 h-5 mr-2" />
                                        V·ªÅ Trang Ch·ªß
                                    </button>
                                </div>
                            </>
                        )
                    })()}
                </div>
            )}

            {showToast && (
                <div className="fixed bottom-4 bg-primary left-4 text-white px-4 py-2 rounded-md shadow-lg transition-opacity duration-300">
                    Vui l√≤ng ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi tr∆∞·ªõc khi xem k·∫øt qu·∫£
                </div>
            )}
        </div>
    )
}

export default LearningStyleTest 